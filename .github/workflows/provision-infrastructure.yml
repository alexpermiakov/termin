name: Provision Infrastructure 

on:
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types:
      - published
  pull_request:

jobs:
  terraform-environments-development:
    name: Terraform Environments (Development)
    runs-on: ubuntu-latest
    environment: development
    if: github.event_name == 'pull_request'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_VAR_environment: "development"
      TF_VAR_region: ${{ vars.AWS_REGION }}
      TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false
      
      - name: Delete KMS Alias (if exists)
        run: |
          if aws kms describe-alias --alias-name alias/eks/termin-eks-development > /dev/null 2>&1; then
            echo "Deleting existing KMS alias..."
            aws kms delete-alias --alias-name alias/eks/termin-eks-development
          else
            echo "KMS alias does not exist. Skipping deletion."
          fi

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Set Unique State Key
        id: set-key
        run: echo "TF_STATE_KEY=state-pr-${{ github.event.pull_request.number }}.tfstate" >> $GITHUB_ENV

      - name: Terraform Init and Plan Development
        working-directory: infrastructure/environments/general
        run: |
          terraform init \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.s3_bucket_name }}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="use_lockfile=true"
          terraform plan

      - name: Terraform Apply Development
        id: apply-step
        working-directory: infrastructure/environments/general
        continue-on-error: true
        run: terraform apply -auto-approve

      - name: Terraform Destroy on Failure
        if: steps.apply-step.outcome == 'failure'
        working-directory: infrastructure/environments/general
        run: |
          echo "Terraform apply failed. Starting destroy to clean up."
          terraform destroy -auto-approve

  terraform-environments-staging:
    name: Terraform Environments
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      id-token: write
      contents: read

    if: github.ref == 'refs/heads/main'
    env:
      TF_VAR_environment: "staging"
      TF_VAR_region: ${{ vars.AWS_REGION }}
      TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/TerraformExecutionRole
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: github-${{ github.run_id }}

      - name: Delete KMS Alias (if exists)
        run: |
          if aws kms describe-alias --alias-name alias/eks/termin-eks-staging > /dev/null 2>&1; then
            echo "Deleting existing KMS alias..."
            aws kms delete-alias --alias-name alias/eks/termin-eks-staging
          else
            echo "KMS alias does not exist. Skipping deletion."
          fi

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Init and Plan Staging
        working-directory: infrastructure/environments/general
        run: |
          terraform init \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.s3_bucket_name }}" \
            -backend-config="key=state.tfstate" \
            -backend-config="use_lockfile=true"
          terraform plan
        
      - name: Terraform Apply Staging
        id: apply-step
        working-directory: infrastructure/environments/general
        continue-on-error: true
        run: terraform apply -auto-approve

      - name: Terraform Destroy on Failure
        if: steps.apply-step.outcome == 'failure'
        working-directory: infrastructure/environments/general
        run: |
          echo "Terraform apply failed. Starting destroy to clean up."
          terraform destroy -auto-approve
      
      - name: Fail the Pipeline
        if: steps.apply-step.outcome == 'failure'
        run: |
          echo "Terraform apply failed. Cleanup complete. Marking job as failed."
          exit 1

  terraform-environments-production:
    name: Terraform Environments
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'release'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_VAR_environment: "production"
      TF_VAR_region: ${{ vars.AWS_REGION }}
      TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false
      
      - name: Delete KMS Alias (if exists)
        run: |
          if aws kms describe-alias --alias-name alias/eks/termin-eks-production > /dev/null 2>&1; then
            echo "Deleting existing KMS alias..."
            aws kms delete-alias --alias-name alias/eks/termin-eks-production
          else
            echo "KMS alias does not exist. Skipping deletion."
          fi

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Init and Plan Production
        working-directory: infrastructure/environments/general
        run: |
          terraform init \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.s3_bucket_name }}" \
            -backend-config="key=state.tfstate" \
            -backend-config="use_lockfile=true"
          terraform plan

      - name: Terraform Apply Production
        id: apply-step
        working-directory: infrastructure/environments/general
        continue-on-error: true
        run: terraform apply -auto-approve

      - name: Terraform Destroy on Failure
        if: steps.apply-step.outcome == 'failure'
        working-directory: infrastructure/environments/general
        run: |
          echo "Terraform apply failed. Starting destroy to clean up."
          terraform destroy -auto-approve